#include "RitationalUnfolding.hpp"
#include <vector>

int main() {
    Polyhedron poly;

    // Cuboctahedron (s01)
    poly.num_faces = 14;
    poly.gon_list = {3, 4, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 3, 3};

    poly.adj_edges = {
        {0, 5, 2}, {2, 19, 16, 1}, {1, 17, 3}, {3, 22, 6, 0}, {4, 8, 18, 5}, {6, 9, 4}, {7, 11, 8},
        {9, 23, 12, 7}, {10, 14, 20, 11}, {12, 15, 10}, {13, 16, 14}, {15, 21, 17, 13}, {18, 20, 19}, {21, 23, 22}
    };

    poly.adj_faces = {
        {3, 4, 1}, {0, 12, 10, 2}, {1, 11, 3}, {2, 13, 5, 0}, {5, 6, 12, 0}, {3, 7, 4}, {7, 8, 4},
        {5, 13, 9, 6}, {9, 10, 12, 6}, {7, 11, 8}, {11, 1, 8}, {9, 13, 2, 10}, {4, 8, 1}, {11, 7, 3}
    };

    // Icosidodecahedron (s02)
    // poly.num_faces = 32;
    // poly.gon_list = {5, 3, 5, 3, 3, 5, 5, 3, 3, 5, 5, 3, 3, 5, 5, 3, 3, 5, 5, 3, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5};

    // poly.adj_edges = {
    //     {0, 5, 32, 30, 2}, {2, 28, 1}, {1, 29, 47, 45, 3}, {3, 6, 0}, {4, 8, 5}, {6, 46, 54, 9, 4}, {7, 11, 34, 33, 8},
    //     {9, 12, 7}, {10, 14, 11}, {12, 53, 52, 15, 10}, {13, 17, 36, 35, 14}, {15, 18, 13}, {16, 20, 17}, {18, 51, 50, 21, 16},
    //     {19, 23, 38, 37, 20}, {21, 24, 19}, {22, 26, 23}, {24, 49, 48, 27, 22}, {25, 28, 31, 39, 26}, {27, 29, 25},
    //     {30, 41, 31}, {33, 40, 32}, {35, 42, 34}, {37, 43, 36}, {39, 44, 38}, {40, 42, 43, 44, 41}, {45, 56, 46},
    //     {48, 55, 47}, {50, 57, 49}, {52, 58, 51}, {54, 59, 53}, {55, 57, 58, 59, 56}
    // };

    // poly.adj_faces = {
    //     {3, 4, 21, 20, 1}, {0, 18, 2}, {1, 19, 27, 26, 3}, {2, 5, 0}, {5, 6, 0}, {3, 26, 30, 7, 4}, {7, 8, 22, 21, 4},
    //     {5, 9, 6}, {9, 10, 6}, {7, 30, 29, 11, 8}, {11, 12, 23, 22, 8}, {9, 13, 10}, {13, 14, 10}, {11, 29, 28, 15, 12},
    //     {15, 16, 24, 23, 12}, {13, 17, 14}, {17, 18, 14}, {15, 28, 27, 19, 16}, {19, 1, 20, 24, 16}, {17, 2, 18},
    //     {0, 25, 18}, {6, 25, 0}, {10, 25, 6}, {14, 25, 10}, {18, 25, 14}, {21, 22, 23, 24, 20}, {2, 31, 5},
    //     {17, 31, 2}, {13, 31, 17}, {9, 31, 13}, {5, 31, 9}, {27, 28, 29, 30, 26}
    // };

    // Truncated tetrahedron (s03)
    // poly.num_faces = 8;
    // poly.gon_list = {3, 6, 6, 6, 3, 6, 3, 3};

    // poly.adj_edges = {
    //     {0, 4, 2}, {2, 12, 16, 14, 11, 1}, {1, 9, 7, 5, 3, 0}, {3, 6, 13, 15, 12, 4},
    //     {5, 8, 6}, {7, 10, 14, 17, 13, 8}, {9, 11, 10}, {15, 17, 16}
    // };

    // poly.adj_faces = {
    //     {2, 3, 1}, {0, 3, 7, 5, 6, 2}, {1, 6, 5, 4, 3, 0}, {2, 4, 5, 7, 1, 0},
    //     {2, 5, 3}, {2, 6, 1, 7, 3, 4}, {2, 1, 5}, {3, 5, 1}
    // };

    int base_face_id; std::cin >> base_face_id;
    int base_edge_id; std::cin >> base_edge_id;
    bool enable_symmetry = false;
    bool y_moved_off_axis = false;

    RotationalUnfolding serch(poly, base_face_id, base_edge_id, enable_symmetry, y_moved_off_axis);
    serch.searchUnfoldingSequence();

    return 0;
}
