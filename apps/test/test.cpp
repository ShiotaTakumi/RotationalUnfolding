#include "RotationalUnfolding.hpp"
#include <vector>

int main() {
    Polyhedron poly;

    // Cuboctahedron (s01)
    poly.num_faces = 14;
    poly.gon_list = {3, 4, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 3, 3};

    poly.adj_edges = {
        {0, 5, 2}, {2, 19, 16, 1}, {1, 17, 3}, {3, 22, 6, 0}, {4, 8, 18, 5}, {6, 9, 4}, {7, 11, 8},
        {9, 23, 12, 7}, {10, 14, 20, 11}, {12, 15, 10}, {13, 16, 14}, {15, 21, 17, 13}, {18, 20, 19}, {21, 23, 22}
    };

    poly.adj_faces = {
        {3, 4, 1}, {0, 12, 10, 2}, {1, 11, 3}, {2, 13, 5, 0}, {5, 6, 12, 0}, {3, 7, 4}, {7, 8, 4},
        {5, 13, 9, 6}, {9, 10, 12, 6}, {7, 11, 8}, {11, 1, 8}, {9, 13, 2, 10}, {4, 8, 1}, {11, 7, 3}
    };

    // Icosidodecahedron (s02)
    // poly.num_faces = 32;
    // poly.gon_list = {5, 3, 5, 3, 3, 5, 5, 3, 3, 5, 5, 3, 3, 5, 5, 3, 3, 5, 5, 3, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5};

    // poly.adj_edges = {
    //     {0, 5, 32, 30, 2}, {2, 28, 1}, {1, 29, 47, 45, 3}, {3, 6, 0}, {4, 8, 5}, {6, 46, 54, 9, 4}, {7, 11, 34, 33, 8},
    //     {9, 12, 7}, {10, 14, 11}, {12, 53, 52, 15, 10}, {13, 17, 36, 35, 14}, {15, 18, 13}, {16, 20, 17}, {18, 51, 50, 21, 16},
    //     {19, 23, 38, 37, 20}, {21, 24, 19}, {22, 26, 23}, {24, 49, 48, 27, 22}, {25, 28, 31, 39, 26}, {27, 29, 25},
    //     {30, 41, 31}, {33, 40, 32}, {35, 42, 34}, {37, 43, 36}, {39, 44, 38}, {40, 42, 43, 44, 41}, {45, 56, 46},
    //     {48, 55, 47}, {50, 57, 49}, {52, 58, 51}, {54, 59, 53}, {55, 57, 58, 59, 56}
    // };

    // poly.adj_faces = {
    //     {3, 4, 21, 20, 1}, {0, 18, 2}, {1, 19, 27, 26, 3}, {2, 5, 0}, {5, 6, 0}, {3, 26, 30, 7, 4}, {7, 8, 22, 21, 4},
    //     {5, 9, 6}, {9, 10, 6}, {7, 30, 29, 11, 8}, {11, 12, 23, 22, 8}, {9, 13, 10}, {13, 14, 10}, {11, 29, 28, 15, 12},
    //     {15, 16, 24, 23, 12}, {13, 17, 14}, {17, 18, 14}, {15, 28, 27, 19, 16}, {19, 1, 20, 24, 16}, {17, 2, 18},
    //     {0, 25, 18}, {6, 25, 0}, {10, 25, 6}, {14, 25, 10}, {18, 25, 14}, {21, 22, 23, 24, 20}, {2, 31, 5},
    //     {17, 31, 2}, {13, 31, 17}, {9, 31, 13}, {5, 31, 9}, {27, 28, 29, 30, 26}
    // };

    // Truncated tetrahedron (s03)
    // poly.num_faces = 8;
    // poly.gon_list = {3, 6, 6, 6, 3, 6, 3, 3};

    // poly.adj_edges = {
    //     {0, 4, 2}, {2, 12, 16, 14, 11, 1}, {1, 9, 7, 5, 3, 0}, {3, 6, 13, 15, 12, 4},
    //     {5, 8, 6}, {7, 10, 14, 17, 13, 8}, {9, 11, 10}, {15, 17, 16}
    // };

    // poly.adj_faces = {
    //     {2, 3, 1}, {0, 3, 7, 5, 6, 2}, {1, 6, 5, 4, 3, 0}, {2, 4, 5, 7, 1, 0},
    //     {2, 5, 3}, {2, 6, 1, 7, 3, 4}, {2, 1, 5}, {3, 5, 1}
    // };

    // Truncated dodecahedron (s07)
    // poly.num_faces = 32;
    // poly.gon_list = {10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 3, 10, 3, 3, 10, 3, 3, 10, 3, 3, 3, 10, 3, 3, 3, 3};

    // poly.adj_edges = {
    //     {0, 4, 40, 38, 36, 34, 33, 22, 20, 2}, {2, 19, 1}, {1, 17, 15, 13, 11, 9, 7, 5, 3, 0}, {3, 6, 4},
    //     {5, 8, 49, 47, 45, 43, 42, 41, 40, 6}, {7, 10, 8}, {9, 12, 58, 56, 54, 52, 51, 50, 49, 10}, {11, 14, 12},
    //     {13, 16, 31, 32, 63, 61, 60, 59, 58, 14}, {15, 18, 16}, {17, 19, 20, 21, 23, 25, 27, 29, 31, 18}, {22, 24, 21},
    //     {24, 33, 35, 72, 70, 68, 66, 65, 26, 23}, {26, 28, 25}, {28, 65, 67, 89, 88, 87, 64, 63, 30, 27}, {30, 32, 29}, {34, 37, 35},
    //     {36, 39, 42, 44, 77, 75, 74, 73, 72, 37}, {38, 41, 39}, {43, 46, 44}, {45, 48, 51, 53, 82, 80, 79, 78, 77, 46}, {47, 50, 48},
    //     {52, 55, 53}, {54, 57, 60, 62, 87, 85, 84, 83, 82, 55}, {56, 59, 57}, {61, 64, 62}, {66, 69, 67},
    //     {68, 71, 74, 76, 79, 81, 84, 86, 89, 69}, {70, 73, 71}, {75, 78, 76}, {80, 83, 81}, {85, 88, 86}
    // };

    // poly.adj_faces = {
    //     {2, 3, 4, 18, 17, 16, 12, 11, 10, 1}, {0, 10, 2}, {1, 10, 9, 8, 7, 6, 5, 4, 3, 0}, {2, 4, 0},
    //     {2, 5, 6, 21, 20, 19, 17, 18, 0, 3}, {2, 6, 4}, {2, 7, 8, 24, 23, 22, 20, 21, 4, 5}, {2, 8, 6},
    //     {2, 9, 10, 15, 14, 25, 23, 24, 6, 7}, {2, 10, 8}, {2, 1, 0, 11, 12, 13, 14, 15, 8, 9}, {0, 12, 10},
    //     {11, 0, 16, 17, 28, 27, 26, 14, 13, 10}, {12, 14, 10}, {13, 12, 26, 27, 31, 23, 25, 8, 15, 10}, {14, 8, 10}, {0, 17, 12},
    //     {0, 18, 4, 19, 20, 29, 27, 28, 12, 16}, {0, 4, 17}, {4, 20, 17}, {4, 21, 6, 22, 23, 30, 27, 29, 17, 19}, {4, 6, 20},
    //     {6, 23, 20}, {6, 24, 8, 25, 14, 31, 27, 30, 20, 22}, {6, 8, 23}, {8, 14, 23}, {12, 27, 14},
    //     {12, 28, 17, 29, 20, 30, 23, 31, 14, 26}, {12, 17, 27}, {17, 20, 27}, {20, 23, 27}, {23, 14, 27}
    // };

    int base_face_id; std::cin >> base_face_id;
    int base_edge_id; std::cin >> base_edge_id;
    bool enable_symmetry = true;
    bool y_moved_off_axis = true;

    RotationalUnfolding serch(poly, base_face_id, base_edge_id, enable_symmetry, y_moved_off_axis);
    serch.searchSequence();

    return 0;
}
